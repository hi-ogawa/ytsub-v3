diff --git a/dist/compiler/loaders.js b/dist/compiler/loaders.js
index a3f7dc36d245afb8176208b0f75bbd03bdec4cfb..0d6a63e8408dac14b19734cb74de25830cd7168a 100644
--- a/dist/compiler/loaders.js
+++ b/dist/compiler/loaders.js
@@ -35,6 +35,7 @@ function _interopNamespace(e) {
 var path__namespace = /*#__PURE__*/_interopNamespace(path);
 
 const loaders = {
+  ".html": "text",
   ".aac": "file",
   ".avif": "file",
   ".css": "file",
diff --git a/dist/compiler/plugins/browserRouteModulesPlugin.js b/dist/compiler/plugins/browserRouteModulesPlugin.js
index dc3f4123e715338a0ac2893725a8eb58f44b7578..f62873d063167631e819b1914655862af5e0c9a2 100644
--- a/dist/compiler/plugins/browserRouteModulesPlugin.js
+++ b/dist/compiler/plugins/browserRouteModulesPlugin.js
@@ -46,10 +46,59 @@ function browserRouteModulesPlugin(config, suffixMatcher) {
           namespace: "browser-route-module"
         };
       });
+      build.onResolve({
+        filter: new RegExp(Object.values(config.routes).map(({ file }) => `./${file}`.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join("|")),
+      }, args => {
+        return {
+          // path: require('node:path').join(config.appDirectory, args.path),
+          path: args.path,
+          sideEffects: false,
+          namespace: "__pure-loader"
+        };
+      });
+      build.onLoad({
+        // filter: new RegExp(Object.values(config.routes).map(({ file }) => `./${file}`.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join("|")),
+        filter: /.*/,
+        namespace: "__pure-loader"
+      }, args => {
+        // return {
+        //   path: require('node:path').join(config.appDirectory, args.path),
+        //   sideEffects: false,
+        // };
+        // // cf. dist/compiler/plugins/browserRouteModulesPlugin_v2.js
+        var fs = require('node:fs');
+        var path = require('node:path');
+        var loaders = require('../loaders.js');
+        let routeFile = path.join(config.appDirectory, args.path);
+        let sourceCode = fs.readFileSync(routeFile, "utf8");
+        let contents = sourceCode.replace("export const loader =", "const loader = /*#__PURE__*/");
+        console.log({ args, contents });
+        return {
+          contents,
+          loader: loaders.getLoaderForFile(routeFile),
+          resolveDir: path.dirname(routeFile)
+        };
+      });
       build.onLoad({
         filter: suffixMatcher,
         namespace: "browser-route-module"
       }, async args => {
+        // {
+        //   // cf. dist/compiler/plugins/browserRouteModulesPlugin_v2.js
+        //   var fs = require('node:fs');
+        //   var path = require('node:path');
+        //   var loaders = require('../loaders.js');
+        //   let file = args.path.replace(suffixMatcher, "");
+        //   let routeFile = path.join(config.appDirectory, file);
+        //   let sourceCode = fs.readFileSync(routeFile, "utf8");
+        //   let contents = sourceCode.replace("export const loader =", "const loader = /*#__PURE__*/");
+        //   console.log({ file, contents });
+        //   return {
+        //     contents,
+        //     loader: loaders.getLoaderForFile(routeFile),
+        //     resolveDir: path.dirname(routeFile)
+        //   };
+        // }
         let theExports;
         let file = args.path.replace(suffixMatcher, "");
         let route = routesByFile.get(file);
diff --git a/dist/config.js b/dist/config.js
index 4127eef2a81df8ea28f6c71f3f98d614dd31ef46..76e6a8d0df63498a8a690af476d66072ff198e94 100644
--- a/dist/config.js
+++ b/dist/config.js
@@ -243,7 +243,7 @@ async function readConfig(remixRoot, serverMode = serverModes.ServerMode.Product
     tsconfigPath = rootJsConfig;
   }
   if (tsconfigPath) {
-    writeConfigDefaults.writeConfigDefaults(tsconfigPath);
+    // writeConfigDefaults.writeConfigDefaults(tsconfigPath);
   }
   let future = {
     unstable_cssModules: ((_appConfig$future5 = appConfig.future) === null || _appConfig$future5 === void 0 ? void 0 : _appConfig$future5.unstable_cssModules) === true,