diff --git a/dist/compiler/compileBrowser.js b/dist/compiler/compileBrowser.js
index 97d71b6ecc8b641e9408301eedf372e5e2e62e1d..b37348a279cd18f26085ab7b233663d5b509080a 100644
--- a/dist/compiler/compileBrowser.js
+++ b/dist/compiler/compileBrowser.js
@@ -141,6 +141,8 @@ const createEsbuildConfig = (build, config, options, onLoader) => {
       }));
     }
   }
+  plugins.unshift(...(globalThis.__esbuildPluginsCommon ?? []));
+  plugins.unshift(...(globalThis.__esbuildPluginsBrowser ?? []));
   return {
     entryPoints,
     outdir: config.assetsBuildDirectory,
diff --git a/dist/compiler/compilerServer.js b/dist/compiler/compilerServer.js
index e478a879768cd6d54b9f42676715db034996f4bc..9abc3c72b8f315cb673477a22300b9430529f72b 100644
--- a/dist/compiler/compilerServer.js
+++ b/dist/compiler/compilerServer.js
@@ -89,6 +89,8 @@ const createEsbuildConfig = (config, assetsManifestChannel, options) => {
   if (config.serverPlatform !== "node") {
     plugins.unshift(nodeModulesPolyfill.NodeModulesPolyfillPlugin());
   }
+  plugins.unshift(...(globalThis.__esbuildPluginsCommon ?? []));
+  plugins.unshift(...(globalThis.__esbuildPluginsServer ?? []));
   return {
     absWorkingDir: config.rootDirectory,
     stdin,
diff --git a/dist/config.js b/dist/config.js
index 4127eef2a81df8ea28f6c71f3f98d614dd31ef46..76e6a8d0df63498a8a690af476d66072ff198e94 100644
--- a/dist/config.js
+++ b/dist/config.js
@@ -243,7 +243,7 @@ async function readConfig(remixRoot, serverMode = serverModes.ServerMode.Product
     tsconfigPath = rootJsConfig;
   }
   if (tsconfigPath) {
-    writeConfigDefaults.writeConfigDefaults(tsconfigPath);
+    // writeConfigDefaults.writeConfigDefaults(tsconfigPath);
   }
   let future = {
     unstable_cssModules: ((_appConfig$future5 = appConfig.future) === null || _appConfig$future5 === void 0 ? void 0 : _appConfig$future5.unstable_cssModules) === true,
diff --git a/dist/devServer/serve.js b/dist/devServer/serve.js
index f51422abcb9ccf72399c97d5b391871e54daf0c0..d25aa6fe6e37f7746aab83eb4e1980697b8b5e83 100644
--- a/dist/devServer/serve.js
+++ b/dist/devServer/serve.js
@@ -37,14 +37,16 @@ function tryImport(packageName) {
   }
 }
 async function serve(config, mode, portPreference) {
-  if (config.serverEntryPoint) {
-    throw new Error("remix dev is not supported for custom servers.");
-  }
-  let {
-    createApp
-  } = tryImport("@remix-run/serve"
-  // eslint-disable-next-line @typescript-eslint/consistent-type-imports
-  );
+  // (patch) use custom entry directly as middleware
+
+  // if (config.serverEntryPoint) {
+  //   throw new Error("remix dev is not supported for custom servers.");
+  // }
+  // let {
+  //   createApp
+  // } = tryImport("@remix-run/serve"
+  // // eslint-disable-next-line @typescript-eslint/consistent-type-imports
+  // );
   // eslint-disable-next-line @typescript-eslint/consistent-type-imports
   let express = tryImport("express");
   await env.loadEnv(config.rootDirectory);
@@ -57,7 +59,8 @@ async function serve(config, mode, portPreference) {
     purgeAppRequireCache(config.serverBuildPath);
     next();
   });
-  app.use(createApp(config.serverBuildPath, mode, config.publicPath, config.assetsBuildDirectory));
+  app.use((req, res, next) => require(config.serverBuildPath).default(config)(req, res, next));
+  // app.use(createApp(config.serverBuildPath, mode, config.publicPath, config.assetsBuildDirectory));
   let dispose = await liveReload.liveReload(config);
   let server;
   let onListen = () => {