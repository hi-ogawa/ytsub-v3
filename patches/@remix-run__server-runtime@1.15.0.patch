diff --git a/dist/routes.js b/dist/routes.js
index 6106c5d3f2ed5436bbee56674e69212d1d05d3bc..292d9840dc253e8d24ead785c1d87ffa95121406 100644
--- a/dist/routes.js
+++ b/dist/routes.js
@@ -45,13 +45,13 @@ function createStaticHandlerDataRoutes(manifest, future, parentId = "", routesBy
       hasErrorBoundary,
       id: route.id,
       path: route.path,
-      loader: route.module.loader ? args => data.callRouteLoaderRR({
+      loader: route.module.loader ? args => (globalThis.__wrapLoader ?? (f => f))((() => data.callRouteLoaderRR({
         request: args.request,
         params: args.params,
         loadContext: args.context,
         loader: route.module.loader,
         routeId: route.id
-      }) : undefined,
+      })), route)() : undefined,
       action: route.module.action ? args => data.callRouteActionRR({
         request: args.request,
         params: args.params,
diff --git a/dist/server.js b/dist/server.js
index fd10bc563175ba69bda9b21ccc7732b20f794900..75ef29fb97d8aaf0e1c78489e20cdf872953f28d 100644
--- a/dist/server.js
+++ b/dist/server.js
@@ -28,7 +28,8 @@ const createRequestHandler = (build, mode$1) => {
   let dataRoutes = routes.createStaticHandlerDataRoutes(build.routes, build.future);
   let serverMode = mode.isServerMode(mode$1) ? mode$1 : mode.ServerMode.Production;
   let staticHandler = router.createStaticHandler(dataRoutes);
-  return async function requestHandler(request, loadContext = {}) {
+  return (globalThis.__wrapRequestHandler ?? (f => f))(requestHandler, (pathname) => routeMatching.matchServerRoutes(routes$1, pathname));
+  async function requestHandler(request, loadContext = {}) {
     let url = new URL(request.url);
 
     // special __REMIX_ASSETS_MANIFEST endpoint for checking if app server serving up-to-date routes and assets